/*                              36 KEY MATRIX / LAYOUT MAPPING
  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮ 30  31  32 │ 33  34  35 ╭───────╯ ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
          ╰────────────┴────────────╯                 ╰─────────────┴─────────────╯
*/

#define MS_FAST 20
#define MS_SLOW 50
// use global-quick-tap-ms for combos (requires PR 1387)
#define HOOK global-quick-tap-ms = <50>;

// just for drawing purposes
#ifndef DUMMY_KEEB
#define DUMMY_KEEB 0
#endif
// missing letters
#if ALPHA_23332 || ALPHA_13332 || DUMMY_KEEB
ZMK_COMBO(q, &kp Q, LT2 LT1, BASE BASE_WIN, MS_SLOW)
ZMK_COMBO(z, &kp Z, LT3 LT2, BASE BASE_WIN, MS_SLOW)
#endif
// left-hand side combos
ZMK_COMBO(tab, &kp TAB, 11 12, BASE BASE_WIN NUM NUMF, MS_FAST)
ZMK_COMBO(esc, &esc_kcancel, 11 12 13, BASE BASE_WIN, MS_SLOW)
ZMK_COMBO(ret, &kp RET, 13 14, BASE BASE_WIN NUM NUMF, MS_FAST)
ZMK_COMBO(copy, &kp LG(C), 21 22, BASE, MS_SLOW)
ZMK_COMBO(paste, &kp LG(V), 22 23, BASE, MS_SLOW)
ZMK_COMBO(cut, &kp LG(X), 21 22 23, BASE, MS_SLOW)
ZMK_COMBO(undo, &kp LG(Z), 10 11, BASE, MS_FAST)
ZMK_COMBO(copy_win, &kp LC(C), 21 22, BASE_WIN, MS_SLOW)
ZMK_COMBO(paste_win, &kp LC(V), 22 23, BASE_WIN, MS_SLOW)
ZMK_COMBO(cut_win, &kp LC(X), 21 22 23, BASE_WIN, MS_SLOW)
ZMK_COMBO(undo_win, &kp LC(Z), 10 11, BASE_WIN, MS_FAST)
// right-hand side combos
// parenthesis combos
ZMK_COMBO(lpar, &kp LPAR, 16 17, BASE BASE_WIN SYM SYMW NUM NUMF, MS_FAST)
ZMK_COMBO(rpar, &kp RPAR, 17 18, BASE BASE_WIN SYM SYMW NUM NUMF, MS_FAST)
// brackets combos
ZMK_COMBO(lbkt, &kp LBKT, 26 27, BASE BASE_WIN SYM SYMW NUM NUMF, MS_FAST)
ZMK_COMBO(rbkt, &kp RBKT, 27 28, BASE BASE_WIN SYM SYMW NUM NUMF, MS_FAST)
// braces combos
ZMK_COMBO(lbrc, &kp LBRC, 15 16, BASE BASE_WIN SYM SYMW NUM NUMF, MS_SLOW)
ZMK_COMBO(rbrc, &kp RBRC, 18 19, BASE BASE_WIN SYM SYMW NUM NUMF, MS_SLOW)
// delete actions
ZMK_COMBO(bspc, &kp BSPC, 6 7, BASE BASE_WIN NAV NAVW NUM NUMF, MS_SLOW)
ZMK_COMBO(del, &kp DEL, 6 8, BASE BASE_WIN NAV NAVW NUM NUMF, MS_SLOW)
ZMK_COMBO(del_word, &kp LA(BSPC), 6 7 8, BASE, MS_SLOW)
ZMK_COMBO(del_line, &del_line, 6 7 8, NAV NAVW, MS_FAST)
ZMK_COMBO(del_word_win, &kp LC(BSPC), 6 7 8, BASE_WIN, MS_FAST)
// mouse layer
ZMK_COMBO(mouse, &mo MSE, 10 32, BASE BASE_WIN, MS_SLOW)
// symbol one-shot layer
ZMK_COMBO(ossym, &sl SYM, 7 8, BASE, MS_SLOW)
ZMK_COMBO(ossymw, &sl SYMW, 7 8, BASE_WIN, MS_SLOW)
