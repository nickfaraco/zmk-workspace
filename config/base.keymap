#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#ifdef CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #include <dt-bindings/zmk/outputs.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/num_word.dtsi> // requires auto-layer module

#include "zmk-helpers/helper.h"
/* use helper macros to define left and right hand keys */
#include "zmk-helpers/key-labels/36.h"                                      // key-position labels


// layers ID definition
#define BASE 0
#define BASE_WIN 1
#define NUM 2
#define NUMF 3
#define NAV 4
#define NAVW 5
#define SYM 6
#define SYMW 7
#define ADJ 8
#define MSE 9

#define xxx &none
#define ___ &trans

#include "common/macros.dtsi"
#include "common/combos.dtsi"
#include "common/extra_keys.h"
#if WIRELESS
    #define BTL1  &bt BT_CLR   &bt BT_SEL 2  &pc_connect   &osx_connect
    #define BTL2  xxx          &bt BT_SEL 4  &bt BT_SEL 3  &out OUT_TOG
#else
    #define BTL1  xxx   xxx   xxx   xxx
    #define BTL2  xxx   xxx   xxx   xxx
#endif

#ifdef MOUSE_KEYS
    #include "common/mouse.dtsi"
#endif

// tapping term definition
#define TAP_TERM_MS 200
#define QUICK_TAP_MS 125

// macros definition
#define meh LG(LC(LALT))
#define hyper LG(LC(LS(LALT)))
#define deg RA(LS(N8))
#define HR_APP LG(LS(SPACE))
#define DSK_PREV_W LG(LC(LEFT))
#define DSK_NEXT_W LG(LC(RIGHT))

// OSX specific macros
#define undo LG(Z)
#define redo LG(LS(Z))
#define DSK_PREV LC(LEFT)
#define DSK_NEXT LC(RIGHT)
#define prev_win LG(TAB)
#define next_win LG(LS(TAB))


// tune mod tap
&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

// layer tap config
&lt {
    flavor = "balanced";
    tapping-term-ms = <TAP_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;      // double-tap + hold repeats tap-key
};

// tune sticky key
&sk {
    release-after-ms = <1000>;
    quick-release;
};

// sticky layer config
&sl {
    release-after-ms = <700>;
};

// caps word settings
&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};


#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

/* left-hand HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)


/* BEHAVIORS */

// tap: sticky-shift | lshft + tap: caps-word | hold: set in keymap (HYPER)
ZMK_MOD_MORPH(ss_cw,
    bindings = <&sk RSHFT>, <&caps_word>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_HOLD_TAP(lt_shft,
    tapping-term-ms = <TAP_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    flavor = "balanced";
    bindings = <&kp>, <&ss_cw>;
)

// tap: space | shft + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_MOD_MORPH(spc_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_RSFT)>;
)
ZMK_HOLD_TAP( lt_spc,
    tapping-term-ms = <TAP_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    flavor = "balanced";
    bindings = <&mo>, <&spc_morph>;
)


// Conditional layers
ZMK_CONDITIONAL_LAYER(tri_layer, NAV SYM, ADJ)
ZMK_CONDITIONAL_LAYER(tri_layer_win, NAVW SYMW, ADJ)
ZMK_CONDITIONAL_LAYER(tri_layer_sym, BASE_WIN SYM, SYMW)
ZMK_CONDITIONAL_LAYER(tri_layer_nav, BASE_WIN NAV, NAVW)


// Tap Dances
ZMK_TAP_DANCE(curr_deg,
    tapping-term-ms = <TAP_TERM_MS>;
    bindings = <&kp DLLR>, <&kp LA(N5)>, <&kp deg>;
)
ZMK_TAP_DANCE(curr_deg_win,
    tapping-term-ms = <TAP_TERM_MS>;
    bindings = <&kp DLLR>, <&macro_euro_win>, <&macro_deg_win>;
)
ZMK_TAP_DANCE(prev_next_song,
    tapping-term-ms = <TAP_TERM_MS>;
    bindings = <&kp C_NEXT>, <&kp C_PREV>;
)
ZMK_TAP_DANCE(screenshot,
    // single-tap: area selector, double-tap: open screenshot app, triple-tap: full-screen
    tapping-term-ms = <TAP_TERM_MS>;
    bindings = <&kp LG(LS(N4))>, <&kp LG(LS(N5))>, <&kp LG(LS(N3))>;
)
ZMK_TAP_DANCE(lockscr,
    tapping-term-ms = <TAP_TERM_MS>;
    bindings = <&none>, <&kp LC(LG(Q))>;
)
ZMK_TAP_DANCE(lockscr_win,
    tapping-term-ms = <TAP_TERM_MS>;
    bindings = <&none>, <&kp LG(L)>;
)


// Smart-num layer
// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUMF 0
ZMK_HOLD_TAP(smart_num,
    tapping-term-ms = <TAP_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    flavor = "balanced";
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <TAP_TERM_MS>;
    bindings = <&num_word NUM>, <&sl NUM>;
)


// Alt+Tab swapper
ZMK_TRI_STATE(swapper,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <LB3>;
)
ZMK_TRI_STATE(swapper_win,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LB3>;
)


// Convenience Mod-Morphs
ZMK_MOD_MORPH(esc_kcancel,
    bindings = <&kp ESCAPE>, <&kp K_CANCEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(dot_colon,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_RSFT)>;
)
ZMK_MOD_MORPH(left_home,
    bindings = <&kp LEFT>, <&left_home_nested>;
    keep-mods = <MOD_LCTL>;
    mods = <(MOD_LCTL|MOD_LALT)>;
)
ZMK_MOD_MORPH(left_home_nested,
    bindings = <&kp LC(LEFT)>, <&kp HOME>;
    mods = <(MOD_LCTL)>;
)
ZMK_MOD_MORPH(right_end,
    bindings = <&kp RIGHT>, <&right_end_nested>;
    keep-mods = <MOD_LCTL>;
    mods = <(MOD_LCTL|MOD_LALT)>;
)
ZMK_MOD_MORPH(right_end_nested,
    bindings = <&kp LC(RIGHT)>, <&kp END>;
    mods = <(MOD_LCTL)>;
)
ZMK_MOD_MORPH(comma_semi,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(quest_excl,
    bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(single_to_doublequote,
    bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


ZMK_LAYER(APTMAK,
    // ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        LTL            &kp W          &kp F          &kp P          &kp B                &kp J          &kp L          &kp U          &kp Y          RTR
    // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        &hml LCTRL R   &hml LALT S    &hml LSHIFT T  &hml LGUI H    &kp K                &kp X          &hmr RGUI N    &hmr RSHIFT A  &hmr RALT I    &hmr RCTRL O
    // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        LBL            &kp C          &kp G          &kp D          LBR                  RBL            &kp M          &comma_semi    &dot_colon     RBR
    // ╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            SMART_NUM      &lt_spc NAV 0        &lt SYM E      &lt_shft meh 0 xxx
    //                               ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(APTMAK_W,
    // ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        ___            ___            ___            ___            ___                  ___            ___            ___            ___            ___
    // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        &hml LGUI R    ___            ___            &hml LCTRL H   ___                  ___            &hmr RCTRL N   ___            ___            &hmr RGUI O
    // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            ___            ___            ___            ___                  ___            ___            ___            ___            ___
    // ╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      ___            ___            ___                  ___            ___            ___
    //                               ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(NUM,
    // ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        xxx            ___            ___            ___            ___                  &kp E          &kp N7         &kp N8         &kp N9         xxx
    // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            ___            ___            ___            ___                  &kp COMMA      &kp N1         &kp N2         &kp N3         &kp N0
    // ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            ___            ___            ___            ___                  xxx            &kp N4         &kp N5         &kp N6         xxx
    // ╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            &kp K_CANCEL   ___                  &lt SYM SPACE  &kp DOT        xxx
    //                               ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(NUMF,
    //╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        xxx            &kp F9         &kp F8         &kp F7         &kp F10              &kp E          &kp N7         &kp N8         &kp N9         xxx
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            &kp F3         &kp F2         &kp F1         &kp F12              &kp COMMA      &kp N1         &kp N2         &kp N3         &kp N0
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        xxx            &kp F6         &kp F5         &kp F4         xxx                  xxx            &kp N4         &kp N5         &kp N6         xxx
    //╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            xxx            ___                  &lt SYM SPACE  &kp DOT        xxx
    //                              ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(NAV,
    //╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        xxx            &kp LG(LEFT)   &kp LG(Q)      &kp LG(W)      xxx                  &screenshot    &kp PG_DN      &kp UP         &kp PG_UP      xxx
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        &sk LCTRL      &sk LALT       &sk LSHFT      &sk LGUI       &kp CAPS             &kp LA(DEL)    &kp LEFT       &kp DOWN       &kp RIGHT      &lockscr
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        xxx            &kp LS(TAB)    &swapper       &kp LC(TAB)    xxx                  xxx            &kp DSK_PREV   &kp HR_APP     &kp DSK_NEXT   xxx
    //╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            xxx            ___                  ___            xxx            xxx
    //                              ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(NAV_W,
    //╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        ___            &kp LA(LEFT)   &kp LA(F4)     &kp LC(W)      ___                  &kp LG(LS(S))  ___            ___            ___            ___
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        &sk LGUI       ___            ___            &sk LCTRL      ___                  &kp LC(DEL)    &left_home     ___            &right_end     &lockscr_win
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            ___            &swapper_win   ___            ___                  ___            &kp DSK_PREV_W ___            &kp DSK_NEXT_W ___
    //╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            ___            ___                  ___            ___            xxx
    //                              ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(SYM,
    //╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        xxx            &kp HASH       &kp AT         &kp CARET      &kp PERCENT          &kp AMPS       &kp PLUS       &kp ASTRK      &curr_deg      xxx
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        &kp QUESTION   &kp GRAVE      &kp BSLH       &kp UNDER      &kp TILDE            &kp PIPE       &kp MINUS      &kp SLASH      &kp EQUAL      &kp EXCL
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        xxx            &kp RA(GRAVE)  &kp RA(E)      &kp LT         xxx                  xxx            &kp GT         &kp SEMI       &kp COLON      xxx
    //╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            ___            ___                  ___            xxx            xxx
    //                              ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(SYM_W,
    //╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        ___            ___            ___            ___            ___                  ___            ___            ___            &curr_deg_win  ___
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            ___            ___            ___            ___                  ___            ___            ___            ___            ___
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            ___            ___            ___            ___                  ___            ___            ___            ___            ___
    //╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            ___            ___                  ___            ___            xxx
    //                              ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

ZMK_LAYER(ADJ,
    //╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        xxx            &soft_off      &to BASE_WIN   &to BASE       &bootloader          &bootloader    &kp C_PP       &kp C_NEXT     &kp C_PREV     xxx
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        BTL1                                                        &sys_reset           &sys_reset     &kp C_VOL_DN   &kp C_VOL_UP   &kp C_MUTE     xxx
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        BTL2                                                        xxx                  xxx            &kp C_BRI_DN   &kp C_BRI_UP   xxx            xxx
    //╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            xxx            xxx                  xxx            xxx            xxx
    //                              ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)

#ifdef MOUSE_KEYS
ZMK_LAYER(MSE,
    //╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮     ╭──────────────┬──────────────┬──────────────┬──────────────┬──────────────╮
        xxx            xxx            xxx            xxx            xxx                  xxx            WH_D           MS_U           WH_U           xxx
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        ___            ___            ___            ___            xxx                  WH_L           MS_L           MS_D           MS_R           WH_R
    //├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤
        xxx            xxx            xxx            xxx            xxx                  xxx            &mkp MB4       &mkp MB3       &mkp MB5       xxx
    //╰──────────────┴──────────────┼──────────────┼──────────────┼──────────────┤     ├──────────────┼──────────────┼──────────────┼──────────────┴──────────────╯
                                      xxx            xxx            xxx                  &mkp MB1       &mkp MB2       xxx
    //                              ╰──────────────┴──────────────┴──────────────╯     ╰──────────────┴──────────────┴──────────────╯
)
#endif
